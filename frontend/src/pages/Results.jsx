import { useNavigate } from "react-router-dom";
import { useMRNASequence } from "../contexts/MRNAsequenceContext";
import { useEffect, useState } from "react";
import toast from "react-hot-toast";
import Spinner from "../ui/Spinner";
import styled from "styled-components";
import Heading from "../ui/Heading";
import { useMRNAfeatures } from "../contexts/MRNAfeaturesContext";
import Button from "../ui/Button";
import { FaClipboard } from "react-icons/fa";

const StyledDiv = styled.div`
  padding: 2rem 1.5rem 4rem;
  max-width: 1100px;
  margin: 0 auto;
`;

const StyledBox = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.2rem;
  margin-bottom: 2rem;
`;

const Item = styled.div`
  background-color: var(--color-grey-100);
  padding: 1.2rem 1.6rem;
  border-radius: 10px;
  box-shadow: var(--shadow-md);
  font-size: 1.4rem;
`;

const SectionTitle = styled.h2`
  margin: 2rem 0 1rem;
  font-size: 1.6rem;
  color: #444;
  font-weight: 600;
`;

function Results() {
  const { mrnaSequence } = useMRNASequence();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);
  const { spacer, adjuvant, signal, antigen, epitopeSeq, epitopeType } =
    useMRNAfeatures();
  const [features, setFeatures] = useState({});

  const downloadImage = () => {
    if (!data?.image_base64) return;

    const link = document.createElement("a");
    link.href = `data:image/png;base64,${data.image_base64}`;
    link.download = "mRNA_structure.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const downloadReport = () => {
    if (!data || !features) return;

    const textContent = `
  Prot2Vac: mRNA Vaccine Design Report
  =====================================
  
  --- mRNA Features ---
  Spacer Sequence: ${features["Spacer Sequence"]}
  Adjuvant: ${features["Adjuvant"]}
  Signal Sequence: ${features["Signal Sequence"]}
  Antigen Sequence: ${features["Antigen Sequence"]}
  Epitope: ${features["Epitope"]}
  Epitope Type: ${features["Epitope Type"]}
  
  --- mRNA Design Output ---
  mRNA Sequence:
  ${data.sequence}
  
  Dot Bracket Notation:
  ${data.structure}
  
  Minimum Free Energy (MFE): ${data.mfe} kCal/mol
  
  Generated by Prot2Vac
  `;

    const blob = new Blob([textContent], { type: "text/plain" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "Prot2Vac_Report.txt";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  useEffect(() => {
    if (!data && loading) return;
    setFeatures({
      "Spacer Sequence": spacer || "—",
      Adjuvant: adjuvant || "—",
      "Signal Sequence": signal || "—",
      "Antigen Sequence": antigen || "—",
      Epitope: epitopeSeq || "—",
      "Epitope Type": epitopeType || "—",
    });
  }, [
    loading,
    data,
    spacer,
    adjuvant,
    signal,
    antigen,
    epitopeSeq,
    epitopeType,
  ]);

  useEffect(() => {
    if (!mrnaSequence) {
      navigate(-1);
    } else {
      fetchResults(mrnaSequence);
    }
  }, [navigate, mrnaSequence]);

  const fetchResults = async (seq) => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch("http://127.0.0.1:5000/api/rnafold", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ sequence: seq }),
      });
      if (!res.ok) throw new Error("Failed to fetch results from RNAfold");
      const data = await res.json();
      setData(data);
    } catch (err) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <StyledDiv>
      {loading ? (
        <Spinner />
      ) : data ? (
        <div className="flex flex-col gap-8">
          <Heading as="h1" style={{ marginBottom: "1rem" }}>
            Results
          </Heading>

          <StyledBox>
            {Object.entries(features).map(([key, label]) => (
              <Item key={key}>
                <strong>{key}</strong>
                <p>{label}</p>
              </Item>
            ))}
          </StyledBox>

          <SectionTitle>
            mRNA Sequence{" "}
            <Button
              onClick={() => {
                toast.success("Copied to clipboard");
                navigator.clipboard.writeText(data.sequence);
              }}
            >
              <FaClipboard />
            </Button>
          </SectionTitle>
          <Item className="overflow-x-auto">
            <pre style={{ fontSize: "1.4rem", whiteSpace: "break-spaces" }}>
              {data.sequence}
            </pre>
          </Item>

          <SectionTitle>
            Dot Bracket Notation{" "}
            <Button
              onClick={() => {
                toast.success("Copied to clipboard");
                navigator.clipboard.writeText(data.structure);
              }}
            >
              <FaClipboard />
            </Button>
          </SectionTitle>
          <Item>
            <pre style={{ fontSize: "1.4rem", whiteSpace: "break-spaces" }}>
              {data.structure}
            </pre>
          </Item>

          {data.mfe && (
            <Item>
              <p>
                <strong>Minimum Free Energy:</strong> {data.mfe} kcal/mol
              </p>
            </Item>
          )}

          <SectionTitle className="text-center">mRNA Structure</SectionTitle>
          <div className="mb-4 flex justify-center">
            <img
              src={`data:image/png;base64,${data.image_base64}`}
              alt="mRNA Structure"
              width={500}
              style={{
                borderRadius: "8px",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
              }}
            />
          </div>

          <div className="w-full grid grid-cols-2 gap-4">
            <Button
              size="medium"
              variation="primary"
              onClick={() => downloadImage()}
            >
              Download Structure
            </Button>
            <Button size="medium" variation="primary" onClick={downloadReport}>
              Download Report
            </Button>
          </div>
        </div>
      ) : (
        <p>No data available.</p>
      )}
    </StyledDiv>
  );
}

export default Results;
